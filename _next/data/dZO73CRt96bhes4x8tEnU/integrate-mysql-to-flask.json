{"pageProps":{"article":{"blog_id":"4e309d73-dc31-47b8-816a-901fd092368d","title":"Integrate Mysql to Flask","short_description":"This lab will cover the installation and usage of the flask_mysqldb library. It will include instructions on installing the library, initializing the database in app.py, and providing examples of how to post data and read data from the database.","description":"<div id=\"content-3\"><h1>Introduction</h1><p>In this article, we will explore how to integrate MySQL with a Flask application using the&nbsp;<code>flask_mysqldb</code>&nbsp;library. This integration allows us to efficiently manage database operations within our Flask web applications. In this lab we will asumme that we are already know to installed the flask application. and we will skip ahead and jump to the sql connection.</p><p><br></p><p>There is a Prerequisites to running this operations:</p><p>Before starting, ensure you have the following installed:</p><ul><li>Python (3.x recommended)</li><li>Flask</li><li>MySQL Server</li><li><code>flask_mysqldb</code>&nbsp;library (<code>pip install flask-mysqldb</code>)</li></ul><p>If we already fulfilled the prerequisites, we will going to install the mysql to the flask application:</p></div><div id=\"content-4\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">pip install flask-mysqldb</code></pre></div><div id=\"content-5\"><p>Once the installation is completed, we will initiate all the MySql configuration. in this lab we will going to initiate the configurations file trough the <strong><u>app.py</u></strong> file. This is not recommended if the application continue grows to large scale. but for this demonstration, we are going to do that.</p></div><div id=\"content-11\"><h1>Configure the MYSQL Connections</h1></div><div id=\"content-12\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">from flask import Flask, request, jsonify\nfrom flask_mysqldb import MySQL\n\napp = Flask(__name__)\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'username'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'database_name'\n\nmysql = MySQL(app)</code></pre></div><div id=\"content-14\"><p>in the app.py, im importing the flask_mysqldb that we are already installed so we can use it in the app.py file later. after import the module. initiate the mysql configuration just like above. fill the neccessary field such as the password for db, the host user, etc. depends non your localhost mysql server.</p><p>it will be good if we try to running the flask server application and there is no anomaly when we are running it. when there is nothing error when we are running the flask server. that means that out mysql connection configurations form the flask is successful. and we will continue to do some basic mysql operations in this flask server.</p></div><div id=\"content-15\"><h1>CREATE OPERATIONS</h1></div><div id=\"content-16\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">app.route('/insert', methods=['POST'])\ndef insert():\n    cur = mysql.connection.cursor()\n    data = request.get_json()\n    name = data['name']\n    age = data['age']\n    cur.execute(\"INSERT INTO users (name, age) VALUES (%s, %s)\", (name, age))\n    mysql.connection.commit()\n    cur.close()\n    return jsonify({'message': 'Data inserted successfully'})</code></pre></div><div id=\"content-17\"><p>This code snippet defines a route in a Flask application (<code>/insert</code>) that handles POST requests. When a POST request is made to this endpoint, the function <code>insert()</code> is executed.</p><p>Inside <code>insert()</code>, it establishes a connection to the MySQL database using <code>flask_mysqldb</code>, extracts JSON data containing <code>name</code> and <code>age</code> from the request body, and inserts this data into the <code>users</code> table using an SQL <code>INSERT</code> statement.</p><p>After committing the transaction to the database and closing the cursor, it returns a JSON response confirming successful data insertion. This functionality demonstrates how to integrate MySQL database operations seamlessly into a Flask web application for handling data input.</p></div><div id=\"content-18\"><h1>READ OPERATIONS</h1></div><div id=\"content-19\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">@app.route('/users', methods=['GET'])\ndef users():\n    cur = mysql.connection.cursor()\n    cur.execute(\"SELECT * FROM users\")\n    results = cur.fetchall()\n    cur.close()\n    users_list = []\n    for row in results:\n        user = {\n            'id': row[0],\n            'name': row[1],\n            'age': row[2]\n        }\n        users_list.append(user)\n    return jsonify({'users': users_list})</code></pre></div><div id=\"content-21\"><p>Let brak down the code piece by piece!</p><p>So This code snippet defines a route in a Flask application (<code>/users</code>) that handles GET requests. When a GET request is made to this endpoint, the function&nbsp;<code>users()</code>&nbsp;is executed.</p><p>Inside&nbsp;<code>users()</code>, it establishes a connection to the MySQL database using&nbsp;<code>flask_mysqldb</code>, executes an SQL&nbsp;<code>SELECT</code>&nbsp;query to fetch all records from the&nbsp;<code>users</code>&nbsp;table, and fetches all results using&nbsp;<code>cur.fetchall()</code>.</p><p>After retrieving the results, it closes the database cursor to release resources. Then, it iterates through the fetched results to construct a list of dictionaries (<code>users_list</code>), where each dictionary represents a user with keys&nbsp;<code>id</code>,&nbsp;<code>name</code>, and&nbsp;<code>age</code>.</p><p>Finally, it returns a JSON response containing the list of users in the format&nbsp;<code>{'users': users_list}</code>. This functionality demonstrates how to retrieve and format data from a MySQL database using Flask, making it accessible via an API endpoint. Very Simple is in it?</p></div><div id=\"content-22\"><h1>Conclusion</h1></div><div id=\"content-23\"><p>By following these steps, you can effectively integrate MySQL into your Flask applications using <code>flask_mysqldb</code>. This setup enables you to perform essential database operations seamlessly within your web development projects.</p></div>","timestamp":"Friday, September 20, 2024 at 11:57:42 AM GMT+8","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fmysql_flask.png?alt=media&token=9890d7a0-79cc-4ed1-beae-0b916b9f72e1","image_alt":"SQL + Flask","slug":"integrate-mysql-to-flask","index":"6b86b273ff34f","tags":["Python","SQL"]},"recommendedPosts":[{"blog_id":"0af995c6-3bd5-405a-ad71-6ebeaa675d38","title":"Building a Simple CQRS Pattern Architecture","short_description":"In this lab we will implement simple CQRS architecture pattern using apache kafka as a message broker, elastic search as a search service and mysql database as a command service.","timestamp":"2024-12-07 01:06:28","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fcqrs-background-title.png?alt=media&token=dd34dffa-1cc4-4b14-b4e2-f6840555b0e4","image_alt":"Image cover of CQRS Architecture","slug":"building-a-simple-cqrs-pattern-architecture","index":"6b86b273ff34f","tags":["SQL","Backend","System Design","Software Architecture","API"]},{"blog_id":"59ebedc0-f362-4c2b-a7ee-a5fd8db2bc29","title":"Create a DAG for Apache Airflow with Python Operator","short_description":"In this lab, you will explore the Apache Airflow web user interface (UI). You will then create a Direct Acyclic Graph (DAG) using PythonOperator and finally run it through the Airflow web UI.","timestamp":"2024-09-20 03:35:46","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fapache_airflow_python.jpg?alt=media&token=f6c31e13-c63f-49c5-b0ad-b54ec8509560","image_alt":"Apache airflow with Python","slug":"create-a-dag-for-apache-airflow-with-python-operator","index":"6b86b273ff34f","tags":["Data","Python"]},{"blog_id":"8be4d7fd-b2ea-4b0f-ad3b-a6064553e06b","title":"Build Kafka Python Client","short_description":"In this lab we will bring back the apache kafka to work with the application environment. In this case we are going to use the apache kafka to a simple python application.","timestamp":"2024-09-20 03:35:05","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fkafka_python.png?alt=media&token=10c2db3d-b180-4bad-af2a-90aee92c47e1","image_alt":"Kafka with Pyhton","slug":"build-kafka-python-client","index":"6b86b273ff34f","tags":["Python","Message Broker","Backend"]}]},"__N_SSG":true}
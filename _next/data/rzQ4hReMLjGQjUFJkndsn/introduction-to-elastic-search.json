{"pageProps":{"article":{"blog_id":"bc2c576f-29ce-4513-ab68-b1c336eb9e90","title":"Introduction to Elastic Search","short_description":"Elasticsearch is a powerful and scalable search engine built on Apache Lucene, commonly used for full-text search, data analysis, and log management.","description":"<div id=\"content-2\"><p>Elasticsearch is a powerful search and analytics engine that is often used in conjunction with various architectural patterns, including CQRS (Command Query Responsibility Segregation). Here’s an overview of why Elasticsearch can be particularly useful in the context of CQRS:</p><h2><strong>Why Use Elasticsearch with CQRS Architecture?</strong></h2><h3><strong>1. Separation of Concerns</strong></h3><p>In CQRS, the system is divided into two parts:</p><ul><li><strong>Command Side</strong>: Handles writes and updates to the system.</li><li><strong>Query Side</strong>: Handles reads and queries from the system.</li></ul><p>Elasticsearch fits naturally into the Query Side of CQRS. It’s designed for fast searches and complex queries, which aligns perfectly with the need for efficient read operations in CQRS. By using Elasticsearch, you can offload complex search and analytics queries from your primary database, allowing it to focus on handling writes and updates.</p><h3><strong>2. Scalability</strong></h3><p>Elasticsearch is built to handle large volumes of data and high query loads. This makes it an excellent choice for the Query Side in CQRS where you might need to execute complex searches, aggregations, and filtering on large datasets. Elasticsearch’s distributed nature allows it to scale horizontally, handling increasing amounts of read traffic without a significant performance hit.</p><h3><strong>3. High Performance</strong></h3><p>Elasticsearch is optimized for search and analytics, providing low-latency responses even for complex queries. It uses inverted indexing to quickly retrieve relevant documents, which is beneficial for applications requiring fast, real-time search capabilities. This performance advantage is critical in the Query Side of CQRS, where read operations need to be efficient and responsive.</p><h3><strong>4. Flexibility in Querying</strong></h3><p>Elasticsearch supports a wide range of query types, including full-text search, filtering, faceting, and aggregations. This flexibility allows you to perform complex and nuanced queries that are often needed for analytics and reporting. In CQRS, where the Query Side might need to provide various views and insights from the data, Elasticsearch can cater to these diverse querying needs.</p></div><div id=\"content-3\"><img style='width:720px;' src='https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2Fcqrs.png?alt=media&token=6eab7b0b-37d8-49f2-9137-27dadd766c96'/></div><div id=\"content-4\"><h1><strong>Elasticsearch Configuration</strong></h1><p>By default, Elasticsearch comes with a feature called X-Pack, which is an additional plugin provided by Elastic. However, since X-Pack is not open-source, you can disable it if it's not needed. All Elasticsearch configurations can be found in the <code>config/elasticsearch.yml</code> file. Elasticsearch uses YAML format for its configurations, making it easy to manage.</p></div><div id=\"content-5\"><h1><strong>Running Elasticsearch</strong></h1><p>To run Elasticsearch, simply open a terminal and execute the following command:</p></div><div id=\"content-6\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">./bin/elasticsearch</code></pre></div><div id=\"content-7\"><p>Once it's running, Elasticsearch will be accessible on port 9200 according to the <code>http.port</code> setting in the configuration file. To stop the Elasticsearch application, you can use the <code>Ctrl + C</code> key combination.</p></div><div id=\"content-9\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">PUT /index_name\n</code></pre></div><div id=\"content-10\"><p>The rules for an index name are: it must be lowercase, cannot contain special characters except for <code>-</code>, <code>+</code>, and <code>_</code> (and these cannot be at the beginning), and it cannot exceed 255 bytes.</p></div><div id=\"content-11\"><h2><strong>Elasticsearch Client</strong></h2><p>Elasticsearch communicates using RESTful API, which means we can use HTTP to interact with it. This makes Elasticsearch very flexible and easy to learn, as well as easy to integrate with other applications.</p><h2><strong>Flexible Schema</strong></h2><p>Unlike relational databases, Elasticsearch allows you to insert data into an index without needing to define the schema first. This schema is very flexible, but once it's established, you cannot change the data type of existing fields; you can only add new attributes. For example, if you create an <code>age</code> attribute with a <code>number</code> type, you cannot change it to a <code>string</code> type later on.</p><h2><strong>Primary Key in Elasticsearch</strong></h2><p>When creating a document in Elasticsearch, you are required to include a primary key or ID. Unlike relational databases, in Elasticsearch, the primary key must use the <code>_id</code> field and can only consist of a single field with a string type.</p><h2><strong>Interacting with Elasticsearch Using API</strong></h2><h3>Creating an Index</h3><p>In Elasticsearch, there is no concept of a database like in RDBMS. You can directly create an index (similar to a table in a database). A common practice is to use the application name as a prefix for the index name, such as <code>myapp_users</code>. This prevents index name conflicts when Elasticsearch is used for multiple applications.</p></div><div id=\"content-12\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">PUT /index_name\n</code></pre></div><div id=\"content-13\"><p>The rules for an index name are: it must be lowercase, cannot contain special characters except for <code>-</code>, <code>+</code>, and <code>_</code> (and these cannot be at the beginning), and it cannot exceed 255 bytes.</p><h3>Deleting an Index</h3><p>To delete an index, you can use the DELETE HTTP method. Deleting an index will automatically remove all data within it.</p></div><div id=\"content-14\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">DELETE /index_name\n</code></pre></div><div id=\"content-15\"><h3>Adding Data with Create API</h3><p>To add data to Elasticsearch, you can use the Create API. This API is safe, meaning if the document with the specified <code>_id</code> doesn't exist, it will be saved as a new document. However, if it already exists, a conflict error will occur.</p></div><div id=\"content-16\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">POST /index_name/_create/id</code></pre></div><div id=\"content-17\"><h3>Retrieving Data with Get API</h3><p>After saving data, you can retrieve it using the Get API. This API returns the data along with its metadata, such as <code>_id</code>, index name, document version, etc.</p></div><div id=\"content-18\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">GET /index_name/_doc/id\n</code></pre></div><div id=\"content-19\"><h3>Multi Get API</h3><p>Elasticsearch also provides a Multi Get API to retrieve multiple documents at once. This is useful when you need to fetch data from multiple indexes in a single API call.</p></div><div id=\"content-20\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">POST /_mget\n</code></pre></div><div id=\"content-21\"><h3>Searching Data with Search API</h3><p>To search for documents without using <code>_id</code>, you can use the Search API. This is a very powerful and complex API that allows you to perform highly specific queries.</p></div><div id=\"content-22\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">POST /index_name/_search\n</code></pre></div><div id=\"content-23\"><h3>Pagination and Sorting</h3><p>The Search API also supports pagination with the <code>from</code> parameter to specify the starting document and the <code>size</code> parameter to specify the number of documents in the response. Additionally, you can sort the search results using the <code>sort</code> parameter.</p></div><div id=\"content-24\"><pre style=\"background-color: black; color: white; padding:10px; border-radius: 5px;\"><code style=\"color: white;\">POST /index_name/_search\n{\n  \"from\": 0,\n  \"size\": 10,\n  \"sort\": [\n    { \"field_name\": \"asc\" }\n  ]\n}\n</code></pre></div><div id=\"content-25\"><h1><strong>Conclusion</strong></h1><p>Elasticsearch is a powerful and flexible tool for search and data analysis. With a basic understanding of configuration, running the application, and interacting with it using APIs, you can start leveraging Elasticsearch for various use cases such as full-text search, log management, and more. In the next article, we'll dive deeper into optimization and advanced features in Elasticsearch.</p></div>","timestamp":"Friday, September 20, 2024 at 2:05:37 PM GMT+8","image":"https://firebasestorage.googleapis.com/v0/b/personal-blog-darmajr.appspot.com/o/blog-content%2FElastic-Search.webp?alt=media&token=419c2bf2-cb3e-4582-a48f-eec9da861459","image_alt":"Intro Elastic search","slug":"introduction-to-elastic-search","index":"6b86b273ff34f","tags":["System Design","Software Architecture","API","Application","Docker"]},"recommendedPosts":[{"blog_id":"36855ea7-b37b-4b4c-91f1-27d90b9bde59","title":"Understanding Database Partitioning vs Sharding: Concepts, Benefits, and Challenges","short_description":"When dealing with large volumes of data, efficient database management becomes essential. Two widely used techniques to improve performance and scalability are database partitioning and database sharding. Although often confused, these approaches differ fundamentally in architecture, complexity, and suitable use cases. This article explores these differences in detail, helping you decide which fits your application best.","timestamp":"2025-05-17 09:42:15","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1747474398774_partition%20vs%20sharding%20db.png","image_alt":"partition vs sharding Database","slug":"Understanding-Database-Partitioning-vs-Sharding-Concepts-Benefits-and-Challenges","index":"d4735e3a265e1","tags":["Database","Database Architecture","Software Architecture","System Design"]},{"blog_id":"675f800c-08cb-459f-aa7d-44cdc9c9c169","title":"System Design Simplified: The Trade-Off Triangle You Must Master","short_description":"Behind every well-architected system is a set of tough decisions. The CAP Theorem simplifies those decisions by showing you what you must give up to keep your system fast, correct, and resilient. Learn how to apply this in real-world architecture.","timestamp":"2025-05-13 01:58:48","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1747100859417_CAP%20BG.jpg","image_alt":"CAP background","slug":"System-Design-Simplified-The-Trade-Off-Triangle-You-Must-Master","index":"d4735e3a265e1","tags":["System Design","CAP Theorem","Distributed Systems"]},{"blog_id":"5c2626c4-8a10-47f1-8c5c-b3ac2d84b69a","title":"Why Domain-Driven Design (DDD) Matters: From Chaos to Clarity in Complex Systems","short_description":"Domain-Driven Design (DDD) is a powerful approach to software development that places the business domain—not the technology—at the center of your design decisions. First introduced by Eric Evans, DDD is essential for developers and architects who want to build systems that reflect real-world complexity and change.","timestamp":"2025-05-12 04:23:04","image":"https://storage.googleapis.com/personal-blog-darmajr.appspot.com/blog-content/1747022797381_Domain-Driven-Design_cover.jpg","image_alt":"DDD Cover","slug":"Why-Domain-Driven-Design-DDD-Matters-From-Chaos-to-Clarity-in-Complex-Systems","index":"d4735e3a265e1","tags":["DDD","Software Architecture","System Design"]}]},"__N_SSG":true}